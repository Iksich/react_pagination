{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","components/ItemList/ItemList.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","itemsPerPage","currentPage","onPageChange","lastPage","Math","ceil","pages","role","className","classNames","disabled","type","onClick","map","page","active","ItemList","items","length","item","itemsPerPageOptions","App","useState","setPage","setItemsPerPage","itemsLength","start","max","end","min","calculateStartAndEnd","id","value","onChange","event","newItemsPerPage","target","option","htmlFor","slice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31e464a3.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n\nexport function calculateStartAndEnd(\n  items: string[],\n  page: number,\n  itemsPerPage: number,\n) {\n  const start = Math.max((page - 1) * itemsPerPage, 0);\n  const end = Math.min(start + itemsPerPage, items.length);\n\n  return { start, end };\n}\n","import classNames from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  total: number;\n  itemsPerPage: number;\n  currentPage: number;\n  onPageChange: (page: number) => void;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  itemsPerPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const lastPage = Math.ceil(total / itemsPerPage);\n  const pages = getNumbers(1, Math.ceil(lastPage));\n\n  return (\n    <nav aria-label=\"Pagination\" role=\"navigation\">\n      <ul className=\"pagination\">\n        <li\n          className={classNames('page-item', {\n            disabled: currentPage === 1,\n          })}\n        >\n          <button\n            data-cy=\"prevLink\"\n            type=\"button\"\n            data-testid=\"prevButton\"\n            className=\"page-link\"\n            aria-disabled={currentPage === 1}\n            onClick={() => {\n              if (currentPage !== 1) {\n                onPageChange(currentPage - 1);\n              }\n            }}\n          >\n            «\n          </button>\n        </li>\n        {pages.map((page) => (\n          <li\n            key={page}\n            className={classNames('page-item', {\n              active: page === currentPage,\n            })}\n          >\n            <button\n              data-cy=\"pageLink\"\n              type=\"button\"\n              data-testid={`pageButton-${page}`}\n              className=\"page-link\"\n              onClick={() => {\n                if (page !== currentPage) {\n                  onPageChange(page);\n                }\n              }}\n            >\n              {page}\n            </button>\n          </li>\n        ))}\n        <li\n          className={classNames('page-item', {\n            disabled: currentPage === lastPage,\n          })}\n        >\n          <button\n            data-cy=\"nextLink\"\n            type=\"button\"\n            data-testid=\"nextButton\"\n            className=\"page-link\"\n            aria-disabled={currentPage === lastPage}\n            onClick={() => {\n              if (currentPage !== lastPage) {\n                onPageChange(currentPage + 1);\n              }\n            }}\n          >\n            »\n          </button>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n","import React from 'react';\n\ninterface ItemListProps {\n  items: string[];\n}\n\nexport const ItemList: React.FC<ItemListProps> = ({ items }) => {\n  if (!items || !items.length) {\n    return <div>No items to display</div>;\n  }\n\n  return (\n    <ul>\n      {items.map((item) => (\n        <li key={item} data-cy=\"item\">\n          {item}\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\nimport { ItemList } from './components/ItemList';\nimport { getNumbers, calculateStartAndEnd } from './utils';\n\nconst itemsPerPageOptions = [3, 5, 10, 20];\n\nexport const App: React.FC = () => {\n  const [page, setPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(itemsPerPageOptions[1]);\n\n  const items = getNumbers(1, 42).map(n => `Item ${n}`);\n  const itemsLength = items.length;\n  const { start, end } = calculateStartAndEnd(items, page, itemsPerPage);\n\n  const handleItemsPerPageChange = (newItemsPerPage: number) => {\n    setItemsPerPage(newItemsPerPage);\n    setPage(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${page} (items ${start + 1} - ${end} of ${itemsLength})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={itemsPerPage}\n            onChange={(event) => handleItemsPerPageChange(+event.target.value)}\n          >\n            {itemsPerPageOptions.map((option) => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={itemsLength || 1}\n        itemsPerPage={itemsPerPage}\n        currentPage={page}\n        onPageChange={setPage}\n      />\n\n      <ItemList items={items.slice(start, end)} key={page} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}